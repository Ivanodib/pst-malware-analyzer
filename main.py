from fileinput import filename
import multiprocessing
import win32com.client
import os
import analyze_hash
import hash_helper
import mmap
from multiprocessing import Pool as ThreadPool
import glob
import time
from tqdm import tqdm
from rich.console import Console

 
def find_pst_folder(OutlookObj, pst_filepath) :
    for Store in OutlookObj.Stores :
        if Store.IsDataFileStore and Store.FilePath == pst_filepath :
            return Store.GetRootFolder()
    return None

def enumerate_folders(FolderObj) :
    #with console.status("[bold red]Scansione Malware per"+ utente_corrente) as status:
    for ChildFolder in FolderObj.Folders :
        enumerate_folders(ChildFolder)
    iterate_messages(FolderObj)

def parse_email(email):
    try:
        #console.print("\n*************** Analizzando email ************************")
                #console.print(FolderObj)
                #console.print(str(item.SenderName).encode('utf-8'))
        #console.print(str(email.SenderEmailAddress).encode('utf-8'))
        #console.print(str(email.SentOn).encode('utf-8'))
                #console.print(item.To)
                #console.print(item.CC)
                #console.print(item.BCC)
        #console.print(str(email.Subject).encode('utf-8'))

        count_attachments = email.Attachments.Count
        if count_attachments > 0 :
            for att in range(count_attachments) :
                allegato = email.Attachments.Item(att + 1).Filename
                if "pdf" in allegato or "xlsx" in allegato or "xls" in allegato or \
                "doc" in allegato or "docx" in allegato or "zip" in allegato or "exe" in allegato:
                    email.Attachments.Item(att + 1).SaveASFile(os.path.join(os.getcwd(), allegato)) # save attachment for next phase.                   
                else:
                    continue    
                
    except Exception as e:
        console.print("[bold red]"+str(e))

def iterate_messages(FolderObj) :    
        
    if len(FolderObj.items) == 0: return
        
    with tqdm(total=len(FolderObj.Items),desc = utente_corrente+ " - " +str(FolderObj),ascii=' >-=', colour='green',position=0,leave=True) as progress_bar:
        for item in FolderObj.Items:    
            parse_email(item)
            progress_bar.update(1)

def calculate_hash(file_path):
    return hash_helper.calc_md5(os.path.join(os.getcwd(),file_path)) # hash calculation

def check_malware(file_name):
    #estrazione hash
    md5 = calculate_hash(file_name)
    risultato = analyze_hash.find_md5(md5.encode(), data)  # static analysys
    if risultato != -1:
        global output
        console.log("[bold red]Malware found. File: "+str(file_name)+" Hash: "+str(md5))
        malware.write("\nUser: "+utente_corrente+"   File: "+str(file_name)+"   Hash: "+str(md5))
        
    return risultato

def create_folder (file_name):

    file = os.path.splitext(file_name)            # file extration from extension
    if not os.path.exists(file[0]):
        global utente_corrente
        utente_corrente = file[0]
        os.mkdir(os.path.basename(file[0]))       # create directory nome.cognome
        os.chdir(file[0])                         
        #print(str(os.getcwd()))
        return True
    else:
        console.log("[bold red]Directory "+ str(file[0])+" already existing.")
        return False
    

def main(pst_file):
    start_time = time.time()
    Outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
    Outlook.AddStore(pst_file)
    PSTFolderObj = find_pst_folder(Outlook,pst_file)
    
    
    console.log("[bold green] ----------- Analyzing "+utente_corrente+".pst ------------" )
    console.log("[bold blue]Attachments extraction..." )
    try :
        enumerate_folders(PSTFolderObj)
    except Exception as exc :
        console.log(str(exc))
    finally :
        Outlook.RemoveStore(PSTFolderObj)        
    
    files = [ f for f in os.listdir(os.getcwd()) if os.path.isfile(os.path.join(os.getcwd(),f))]


    #hash_attachments = {}
    hash_attachments = []
    #print(files)
    '''
    for f in files:
        h = calculate_hash(f)
        hash_attachments.append(h.encode())
        #hash_attachments.update({f:h.encode()})
    '''
    #h_atts = []

    console.log("[bold blue]Malware analysis for "+ utente_corrente +" ...")    
    pool = ThreadPool(multiprocessing.cpu_count()) # multithreading support, use all cpu available.
    result = pool.map( check_malware, files) 
    pool.close()
    pool.join()  
    console.log("Scansione per "+utente_corrente+" Terminata in [bold green] %.1f secondi \n" % (time.time() - start_time))

    hash_tachments = []
    #hash_attachments = {}

root_path = r"C:\Dev\Pst Analyzer"
hash_db_path = r"hash_db.md5"
hash_db = open(os.path.join(root_path,hash_db_path),'r') 
data   = mmap.mmap( hash_db.fileno(), 0, access=mmap.ACCESS_READ) # load DB one time in memory.
malware = open("Malware Output.txt", "w")
malware.write("\n ---- LOG PST ANALYZER ----")
console = Console()
utente_corrente =""


# TODO: chiudere tutti i file aperti
# TODO: aggiungere funzionalità fault tollerance
# TODO: aggiungere funzionalità excel. fixare passaggio di parametri da pool.map a checkmalware.

if __name__ == '__main__':
    
    pst_files = []

    '''
    # leggo file dei pst
    if os.path.isfile("temp_pst.txt") == True:
        print("file c'è. leggo linea per linea")
        with open("temp_pst.txt") as f:
            lines = f.readlines()
            for l in lines:
                pst_files.append(l)
                print(pst_files)
    else:        
        print("file non c'è. creo e scrivo linea per linea")
    # se il file non esiste lo creo
        for file in glob.glob("*.pst"):
            pst_files.append(file)
            f = open('temp_pst.txt','a')
            f.write(file + "\n")
        f.close()

    #processo i vari pst

    with open("temp_pst.txt") as f:
        lines = f.readlines()
    '''
    for file in glob.glob("*.pst"):
        pst_files.append(file)

    for pst in pst_files:
        if create_folder(pst):                  # create directory for user
            main(os.path.join(root_path,pst))   # process .pst
            os.chdir(root_path)                 
        else:
            continue   
    malware.close()
    data.close()
    hash_db.close()     
        #lines = lines[:-1]
        #print(lines)

